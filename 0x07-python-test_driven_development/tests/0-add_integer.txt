# Module: `0-add_integer`
============================

Testing `add_integer` Function
---------------------

Importing function from the module:
    >>> add_integer = __import__('0-add_integer').add_integer

Adding two positive integers
    >>> add_integer(1, 2)
    3

Adding positive and negative integers
    >>> add_integer(10, -2)
    8

    >>> add_integer(-2, 10)
    8

Adding float (2.1) and integer (98)
    >>> add_integer(2.1)
    100

    >>> add_integer(2.1, 98)
    100

Adding using default Value
    >>> add_integer(2)
    100

Adding Zero to an Integer
    >>> add_integer(0, 42)
    42

Adding Zero to a Float
    >>> add_integer(0, 42.0)
    42

Adding Two Negative Floats
    >>> add_integer(-2.5, -2.5)
    -4

Adding Two Negative Integers
    >>> add_integer(-10, -20)
    -30

Adding Zero and a Negative Integer
    >>> add_integer(0, -42)
    -42

Adding two float numbers
    >>> add_integer(2.9, 2.9)
    4

Subtracting 1 from 98
    >>> add_integer(-1)
    97

Adding an integer number and a string
    >>> add_integer(4, "School")
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Passing `None`
    >>> add_integer(None)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Adding two strings
    >>> add_integer('1', '2')
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a string and a number
    >>> add_integer('1', 1)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a tuple
    >>> add_integer((1, 1))
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding an array/list
    >>> add_integer([1, 1])
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding a number and a list
    >>> add_integer(123, [])
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Passing a string
    >>> add_integer("Hello")
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Case Overflow 1:

    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case Overflow 2:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case NaN:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer
